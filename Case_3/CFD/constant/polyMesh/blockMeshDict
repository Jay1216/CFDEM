/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.0.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1.0;

vertices
(
//block: (6mm*3mm*0.39m)
 (-0.003 -0.0015 0)
 (0.003 -0.0015 0)
 (0.003 0.0015 0)
 (-0.003 0.0015 0)
 (-0.003 -0.0015 0.03)
 (0.003 -0.0015 0.03)
 (0.003 0.0015 0.03)
 (-0.003 0.0015 0.03)
 (-0.003 -0.0015 0.39)
 (0.003 -0.0015 0.39)
 (0.003 0.0015 0.39)
 (-0.003 0.0015 0.39)
 );


blocks
(
  hex (0 1 2 3 4 5 6 7) (1 1 100) simpleGrading (1 1 1) // dz=0.3mm
  hex (4 5 6 7 8 9 10 11) (1 1 1200) simpleGrading (1 1 1) // dz=0.3mm
);

// ************************************************************************* //
boundary
    (
        wall_bottom             // patch name
        {
            type wall;    // patch type for patch 0
            faces ((0 3 2 1));
        } 
        wall_top
        {
            type patch;
            faces ((8 9 10 11));
        }
        front1 
        {
            type cyclic;
            neighbourPatch back1;
            faces ((0 1 5 4));
        }
        back1
        {
             type cyclic;
             neighbourPatch front1;
             faces ((7 6 2 3));
        }
        left1
        {
              type           cyclic;
              neighbourPatch right1;
              faces          ((7 3 0 4));
        }
        right1
        {
              type           cyclic;
              neighbourPatch left1;
              faces          ((6 5 1 2));
        }
        front2 
        {
            type cyclic;
            neighbourPatch back2;
            faces ((4 5 9 8));
        }
        back2
        {
             type cyclic;
             neighbourPatch front2;
             faces ((7 6 10 11));
        }
        left2
        {
              type           cyclic;
              neighbourPatch right2;
              faces          ((11 7 4 8));
        }
        right2
        {
              type           cyclic;
              neighbourPatch left2;
              faces          ((10 6 5 9));
        }
    );
// ************************************************************************* //
